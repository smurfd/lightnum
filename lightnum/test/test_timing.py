import lightnum.lightnum as lp
import numpy as np

# Check if numpy > lightnum, numpy time and lightnum time, print percentage
def test_timing_mod(): lp.testing.timing_test_looper(np.mod, lp.mod, "mod", [1, 2, 3, 4], [1, 2, 6, 4])
def test_timing_sqrt(): lp.testing.timing_test_looper(np.sqrt, lp.sqrt, "sqrt", [1, 2, 3, 4])
def test_timing_assert(): lp.testing.timing_test_looper(np.testing.assert_equal, lp.testing.assert_equal, "assert_equal", [1, 2, 3, 4], [1, 2, 3, 4])
def test_timing_where(): lp.testing.timing_test_looper(np.where, lp.where, "where", [True, True, True, True, True, False, False, False, False, False], lp.arange(10).tolist(), [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])
def test_timing_max(): lp.testing.timing_test_looper(np.max, lp.max, "max", [[[[2, 2, 3, 4], [1, 2, 3, 4]],[[1, 2, 3, 4], [1, 2, 9, 4]]],[[[1, -1, 3, 4], [1, 2, 3, 4]],[[1, 2, 31, 4], [1, 2, 3, 4]]]])
def test_timing_zeros(): lp.testing.timing_test_looper(np.zeros, lp.zeros, "zeros", [4])
def test_timing_zeros_big(): lp.testing.timing_test_looper(np.zeros, lp.zeros, "zeros big", [3, 3, 3, 3])
def test_timing_ones(): lp.testing.timing_test_looper(np.ones, lp.ones, "ones", [4])
def test_timing_ones_big(): lp.testing.timing_test_looper(np.ones, lp.ones, "ones big", [3, 3, 3, 3])
def test_timing_zeros_like(): lp.testing.timing_test_looper(np.zeros_like, lp.zeros_like, "zeros like", [4])
def test_timing_zeros_like_big(): lp.testing.timing_test_looper(np.zeros_like, lp.zeros_like, "zeros like big", [3, 3, 3, 3])
def test_timing_zeros_like_array(): lp.testing.timing_test_looper(np.zeros_like, lp.zeros_like, "zeros like array", [[0, 1, 2],[3, 4, 5]])
def test_timing_ones_like(): lp.testing.timing_test_looper(np.ones_like, lp.ones_like, "ones like", [4])
def test_timing_ones_like_big(): lp.testing.timing_test_looper(np.ones_like, lp.ones_like, "ones like big", [3, 3, 3, 3])
def test_timing_ones_like_array(): lp.testing.timing_test_looper(np.ones_like, lp.ones_like, "ones like array", [[0, 1, 2],[3, 4, 5]])
def test_timing_array(): lp.testing.timing_test_looper(np.array, lp.array, "array", [3, 3, 3])
def test_timing_exp(): lp.testing.timing_test_looper(np.exp, lp.exp, "exp", [2])
def test_timing_exp2(): lp.testing.timing_test_looper(np.exp2, lp.exp2, "exp2", [2])
def test_timing_log(): lp.testing.timing_test_looper(np.log, lp.log, "log", [1, 2, 3, 4])
def test_timing_log_array(): lp.testing.timing_test_looper(np.log, lp.log, "log array", [[1, 2, 3, 4], [1, 2, 3, 4]])
def test_timing_sum(): lp.testing.timing_test_looper(np.sum, lp.sum, "sum", (3, 3))
def test_timing_sumf(): lp.testing.timing_test_looper(np.sum, lp.sum, "sumf", (3.3, 3.3))
def test_timing_min(): lp.testing.timing_test_looper(np.min, lp.min, "min", [[[[2, 2, 3, 4], [1, 2, 3, 4]],[[1, 2, 3, 4], [1, 2, 9, 4]]],[[[1, -1, 3, 4], [1, 2, 3, 4]],[[1, 2, 31, 4], [1, 2, 3, 4]]]])
def test_timing_maximum(): lp.testing.timing_test_looper(np.maximum, lp.maximum, "maximum", [[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 2, 3, 4]])
def test_timing_minimum(): lp.testing.timing_test_looper(np.minimum, lp.minimum, "minimum", [[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 2, 3, 4]])
def test_timing_full(): lp.testing.timing_test_looper(np.full, lp.full, "full", 6, 3)
def test_timing_full_tuple(): lp.testing.timing_test_looper(np.full, lp.full, "full tuple", (6,6,6), 4)
def test_timing_modf(): lp.testing.timing_test_looper(np.mod, lp.mod, "modf", [1.1, 2.2, 3.3, 4.4], [1.1, 2.2, 6.6, 4.4])
def test_timing_mod_array(): lp.testing.timing_test_looper(np.mod, lp.mod, "mod array", [[1, 2, 3, 4], [1, 2, 6, 4]], [[2, 1, 7, 4], [1, 3, 6, 9]])
def test_timing_cos(): lp.testing.timing_test_looper(np.cos, lp.cos, "cos", [1, 2, 3, 4])
def test_timing_arctan2(): lp.testing.timing_test_looper(np.arctan2, lp.arctan2, "arctan2", [1, 2, 3, 4], [1, 2, 6, 4])
def test_timing_amax(): lp.testing.timing_test_looper(np.amax, lp.amax, "amax", [1, 2, 3, 4])
def test_timing_amax_array(): lp.testing.timing_test_looper(np.amax, lp.amax, "amax", [(14, 29, 34), (41, 55, 46), (1, 38, 29), (5, 57, 52)])
def test_timing_isin(): lp.testing.timing_test_looper(np.isin, lp.isin, "isin", [1, 2, 3, 4], [1, 2, 6, 4])
def test_timing_ceil(): lp.testing.timing_test_looper(np.ceil, lp.ceil, "ceil", [1.67, 4.5, 7, 9, 12])
def test_timing_reshape(): lp.testing.timing_test_looper(np.reshape, lp.reshape, "reshape", [1, 2, 3, 4, 5, 6, 7, 8], (2, 4))
def test_timing_reshape_flat(): lp.testing.timing_test_looper(np.reshape, lp.reshape, "reshape flat", [[1, 2, 3, 4], [5, 6, 7, 8]], -1)
def test_timing_reshape_flat_array(): lp.testing.timing_test_looper(np.reshape, lp.reshape, "reshape flat array", [[[1, 2, 3, 4], [5, 6, 7, 8]],[[1, 2, 3, 4], [5, 6, 7, 8]]], -1)
def test_timing_count_zero(): lp.testing.timing_test_looper(np.count_nonzero, lp.count_nonzero, "count_nonzero", [[3, 6, 9], [3, 0, 9]])
def test_timing_count_zero2(): lp.testing.timing_test_looper(np.count_nonzero, lp.count_nonzero, "count_nonzero", [[3, 6, 9], [0, 0, 0]])
def test_timing_allclose(): lp.testing.timing_test_looper(np.allclose, lp.allclose, "allclose", [1e10,1e-7], [1.00001e10,1e-8])
def test_timing_allclose2(): lp.testing.timing_test_looper(np.allclose, lp.allclose, "allclose2", [1e10,1e-8], [1.00001e10,1e-9])
def test_timing_cbrt(): lp.testing.timing_test_looper(np.cbrt, lp.cbrt, "cbrt", [1, 8, 27])
def test_timing_copy(): lp.testing.timing_test_looper(np.copy, lp.copy, "copy", [[1, 2, 3, 4], [5, 6, 7, 8]])
def test_timing_median(): lp.testing.timing_test_looper(np.median, lp.median, "median", [[10, 7, 4], [3, 2, 1]])
def test_timing_arange(): lp.testing.timing_test_looper(np.arange, lp.arange, "arange", 3, 7)
def test_timing_flip(): lp.testing.timing_test_looper(np.flip, lp.flip, "flip", [1, 2, 3, 4, 5, 6, 7, 8])
def test_timing_split(): lp.testing.timing_test_looper(np.split, lp.split, "split", np.arange(6), 2)
def test_timing_tile(): lp.testing.timing_test_looper(np.tile, lp.tile, "tile", [0, 1, 2, 3, 4, 5], 2)
def test_timing_concatenate(): lp.testing.timing_test_looper(np.concatenate, lp.concatenate, "concatenate", ([1, 2, 3, 4], [4, 5, 6]))
def test_timing_cumsum(): lp.testing.timing_test_looper(np.cumsum, lp.cumsum, "cumsum", [[1, 2, 3], [4, 5, 6]])
def test_timing_matmul(): lp.testing.timing_test_looper(np.matmul, lp.matmul, "matmul", [[1, 0], [0, 1]], [[4, 1], [2, 2]])
def test_timing_broadcast_to(): lp.testing.timing_test_looper(np.broadcast_to, lp.broadcast_to, "broadcast_to", [1, 2, 3], (3, 3))
def test_timing_outer(): lp.testing.timing_test_looper(np.outer, lp.outer, "outer", [[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]])
def test_timing_eye(): lp.testing.timing_test_looper(np.eye, lp.eye, "eye", 4, 4, k=-1)
def test_timing_expand_dims(): lp.testing.timing_test_looper(np.expand_dims, lp.expand_dims, "expand_dims", [[1, 2, 3, 4], [5, 6, 7, 8]], 2)
def test_timing_argmax(): lp.testing.timing_test_looper(np.argmax, lp.argmax, "argmax", [[1, 2, 3, 4], [5, 6, 7, 8]])
def test_timing_argmax_axis(): lp.testing.timing_test_looper(np.argmax, lp.argmax, "argmax", [[1, 2, 3, 4], [5, 6, 7, 8]], axis=1)
def test_timing_transpose(): lp.testing.timing_test_looper(np.transpose, lp.transpose, "transpose", [[1, 2, 3, 4], [5, 6, 7, 8]])
def test_timing_stack(): lp.testing.timing_test_looper(np.stack, lp.stack, "stack", [[1, 2, 3, 4], [5, 6, 7, 8]])
def test_timing_vstack(): lp.testing.timing_test_looper(np.vstack, lp.vstack, "vstack", [[1, 2, 3, 3], [5, 6, 7, 8]])
def test_timing_nonzero(): lp.testing.timing_test_looper(np.nonzero, lp.nonzero, "nonzero", [[1, 2, 3, 0], [5, 6, 7, 8]])
def test_timing_squeeze(): lp.testing.timing_test_looper(np.squeeze, lp.squeeze, "squeeze", [[[0, 1, 2], [3, 4, 5], [6, 7, 8]]])
def test_timing_clip(): lp.testing.timing_test_looper(np.clip, lp.clip, "clip", [[1, 2, 3, 4], [5, 6, 7, 8]], 2, 5)
def test_timing_unique(): lp.testing.timing_test_looper(np.unique, lp.unique, "unique", [[[0, 1, 0, 2], [3, 4, 5, 2], [6, 7, 8, 4]]])
def test_timing_triu(): lp.testing.timing_test_looper(np.triu, lp.triu, "triu", [[1, 2, 3], [1, 2, 3], [1, 2, 3]], 1)
def test_timing_meshgrid(): lp.testing.timing_test_looper(np.meshgrid, lp.meshgrid, "meshgrid", [1, 2, 3], [4, 5, 6])
#def test_timing_newaxis(): lp.testing.timing_test_looper(np.newaxis, lp.newaxis, "newaxis", [[1, 2, 3], [1, 2, 3]], 1) # should be this for numpy : x = np.array([[1,2,3],[1,2,3]]); x[np.newaxis, :]
def test_timing_frombuffer(): lp.testing.timing_test_looper(np.frombuffer, lp.frombuffer, "frombuffer", b'smurfd', np.uint8)
def test_timing_promote_types(): lp.testing.timing_test_looper(np.promote_types, lp.promote_types, "promote_types", np.uint8, np.uint32)

if __name__ == '__main__':
  test_timing_mod()
  test_timing_sqrt()
  test_timing_assert()
  test_timing_where()
  test_timing_max()
  test_timing_zeros()
  test_timing_zeros_big()
  test_timing_ones()
  test_timing_ones_big()
  test_timing_zeros_like()
  test_timing_zeros_like_array()
  test_timing_ones_like()
  test_timing_ones_like_big()
  test_timing_ones_like_array()
  test_timing_array()
  test_timing_exp()
  test_timing_exp2()
  test_timing_log()
  test_timing_log_array()
  test_timing_sum()
  test_timing_sumf()
  test_timing_min()
  test_timing_maximum()
  test_timing_minimum()
  test_timing_full()
  test_timing_full_tuple()
  test_timing_modf()
  test_timing_mod_array()
  test_timing_cos()
  test_timing_arctan2()
  test_timing_amax()
  test_timing_amax_array()
  test_timing_isin()
  test_timing_ceil()
  test_timing_reshape()
  test_timing_reshape_flat()
  test_timing_reshape_flat_array()
  test_timing_count_zero()
  test_timing_count_zero2()
  test_timing_allclose()
  test_timing_allclose2()
  test_timing_cbrt()
  test_timing_copy()
  test_timing_median()
  test_timing_arange()
  test_timing_flip()
  test_timing_split()
  test_timing_tile()
  test_timing_concatenate()
  test_timing_cumsum()
  test_timing_matmul()
  test_timing_broadcast_to()
  test_timing_outer()
  test_timing_eye()
  test_timing_expand_dims()
  test_timing_argmax()
  test_timing_argmax_axis()
  test_timing_transpose()
  test_timing_stack()
  test_timing_vstack()
  test_timing_nonzero()
  test_timing_squeeze()
  test_timing_clip()
  test_timing_unique()
  test_timing_triu()
  test_timing_meshgrid()
  #test_timing_newaxis()
  test_timing_frombuffer()
  test_timing_promote_types()
  print("OK!")

"""
# 3.8.18
[True] Numpy mod: 146.6575ms Lightnum mod: 141.5980ms = 103%
# 3.9.18
[True] Numpy mod: 164.0236ms Lightnum mod: 141.9923ms = 115%
# 3.10.7
[True] Numpy mod: 160.4913ms Lightnum mod: 130.3058ms = 123%
# 3.11.7
[True] Numpy mod: 188.5695ms Lightnum mod: 98.5075ms = 191%
# 3.12.1
[True] Numpy mod: 205.5769ms Lightnum mod: 104.2299ms = 197%
"""
